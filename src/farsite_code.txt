**gridthem.cpp**
class LandscapeTheme

ReadStats()
- NumAllCats[0~9]
- AllCats[0~9][0~10]
- maxval[0~9]
- minval[0~9]

CopyStats() // default CopyStats(3);
- landscapetheme -> gridtheme
- NumCats = NumAllCats
- MaxVal = maxval
- MinVal = minval

CreateRamp()
- VarVal = 18


ReadHeader() -> landscape 배열에 lcp 파일의 8 bands 데이터 저장
=> LoadLandscapeFile() 끝 ----------------------------------------


**FARSITE.cpp**
LoadInputsFile() 시작 --------------------------------------------
미리 선언된 문자열, 값 등을 찾기 위해 파일을 읽고 대응되는 값을 ICF class의 특정 값으로 불러옴


**Farsite5.cpp**
CreateIgnitionGrid() 시작 ----------------------------------------
grid -> cell -> segment 단위로 쪼개 fuel 분석
Ignition.ifile에 ignition file name 복사
CellData로 cell의 데이터 참조 가능 -> GetCellPosition() - grid에서 몇 번째 셀인지 확인 가능
CellData(x, y, celldata, fuels,. ,. ,.)에서 x, y값을 데이터 최상단, 하단 값을 raster 행, 열을 이용하여 각각 위치를 구할 수 있지 않을까?

icf_def.h에 d_RAWS 구조체를 통해 기상 데이터 접근 가능
RAWS (Remote Automated Weather Station)

시간대별로 접근이 가능함
- icf.a_RAWS[].i_~~
-> 그리드 전체로 적용 가능 / WindNinja를 활용하여 그리드로 하는 방법은??

산불이 시작하는 정확한 시간대를 파악해야 함
-> SimulationLoop는 4800/60으로 81번의 반복문을 돌리는 반면, 날씨 RAWS 데이터는 249줄
=> START_TIME, END_TIME으로 설정 가능??
=> START_TIME, END_TIME 내에 해당하는 시간만 이용
=> WindNinja output인 .atm 파일을 활용하여 그리드 별 풍향, 풍속 데이터를 확보
-> cell 데이터를 얻기 더 편리


LaunchFarsite() 시작 ----------------------------------------
Ignition.ShapeInput() -> <fswignt.cpp> ShapeInput()
- 초기 발화점 데이터 설정 함수
- 발화점 polygon의 개수 = Newfire
-> <Farsite5.cpp> AllocPerimeter1(Newfire, 꼭지점 개수+1)
- perimeter1[NewFire] 배열의 NewFire번 째 원소에 대한 꼭지점 수*5 만큼의 2차원 배열 할당
-> <fswignt.cpp> ShapeInput()
- pFarsite->SetPerimeter1(), pFarsite->SetFireChx(), pFarsite->SetReact()를 통해 polygon 꼭지점들에 대한 rate of spread, fireline intensity, fire reaction? 초기화
- pFarsite->SetNumPoints() 로 꼭지점 개수 설정, pFarsite->SetInout() 로 불이 타고 있는지 여부 확인?, pFarsite->IncNewFires() 로 새로운 불의 수 + 1
- BoundingBox()
-> <fsxwutil.cpp> BoundingBox() // 의미 파악이 필요함
- polygon의 좌표 설정 및 rate of spread, fireline intensity 설정
-Ignition.ShapeInput() 끝-

AllocStationGrid()
- 산불 확산 환경의 차원 설정 (2차원)
- StationGrid: 기상청 수를 정의하는 구조체
- Execute_StartRestart()


Execute_StartRestart() 시작 ---------------------------------------------
- i_Ret = FarsiteSimulationLoop()


FarsiteSimulationLoop() 시작 ---------------------------------------------
- m_BSG.Init() (Burn Spot Grid)
-> <Far_BSG.cPP> Init()
- FarsiteProcess1()
-> if(FARSITE_GO)
-> i_Ret = this->Run_CondDLL()
-> <Far_Cond.cpp> Run_CondDLL() -> FMC_LoadInputs()
-> <FMC_CFMC.cpp> CheckInputs(), <FMC_CI4.cpp> CheckInputs(), <FMC_CI.cpp> InitCheck()
-> <FMC_CI4.cpp> CheckWeatherSteram()
-> <FMC_CFMC.cpp> Run()
-> <FMC_FE2.cpp> CondMngr() -> <FMC_CI4.cpp> RAWS_SetMinuteDate()
-> <FMC_FE2.cpp> CalcCapFuelMoistures()	// FARSITE 시뮬레이션 시작 시 가장 많은 시간이 소요되는 함수
-> <FMC_FE3.cpp> RunFmsThreads_RAWS()


burn.BurnIt()
**fsxwburn4.cpp**
burn.BurnIt() 시작 ---------------------------------------------
pFarsite->DistanceCheckMethod() ??
pFarsite->AllocElev()
tranz()
ResumePerimeterThreads()
-> SetRange() (산불에 관련된 변수들 업데이트)
-> StartBurnThread()
StartBurnThread() -> RunBurnThread() (typedef long X_HANDLE) -> PerimeterThread() -> return hBurnThread (X_HANDLE )
PerimeterThread() -> GetPoints(), fe->GetLandscapeData(), SurfaceFire(), CrownFire()
-> spreadrate(), ellipse(), grow() (산불 확산 좌표 계산), SpreadCorrect() 등 산불 확산 연산 함수들


fsxwignt.cpp 파일에서 NewFire가 되는 조건
Farsite5.cpp 파일에서 newfire가 되는 조건


class CPerimeterData
- perimData (도형 개수?)
- GetNumPts() (꼭지점 개수)
- GetPointX() (x 좌표 불러오기)
- GetPointY() (y 좌표 불러오기)


**fsx4.hpp**
class BurnThread (산불 확산 연산을 병렬로 수행하기 위한 스레드??)
- struct MegrePoints ()
- struct PerimPoints () -> struct BurnHistory


**fsxpfront.h**
struct FireRing


**icf_input.cpp**
날씨 데이터 읽어오기 ---------------------------------------------
ICF::Input() 함수
- if(!ICF::RAWS_WeatherData()
-> RAWS_WeatherData()
-> this->a_RAWS[iN_Recs].i_Mth, i_Dat, i_Time, f_Temp, f_Humidity, f_PerHou, f_WinSpd, _WinDir, F_CloCov

a_RAWS - weather stream structures

int i_Arg 변수에 RAWS 크기 값을 저장


**newfms.cpp**
Farsite5.cpp
- FarsiteSimulationLoop() i_ret = this->Run_CondDLL
-> newfms.cpp
- Fms_Update() hFtn

1) Hourly RAWS data
<newfms.cpp> Fms_Update()
<- <FMC_FE3.cpp> Stick07_Next() <- Stick07_Mngr() <- UpdateMapMoisture_RAWS() <- UpdateMoistures_RAWS()
<- RunFmsThread_RAWS() <- StartFmsThread_RAWS() <- RunFmsThreads_RAWS()
<- <FMC_FE2.cpp> CalcMapFuelMoistures() <- CondMngr()
<- <FMC_CFMC.cpp> Run()
<- <Far_Cond.cpp> Run_CondDLL()
<- <Farsite5.cpp> FarsiteSimulationLoop()

2) Stuart Brittain
<newfms.cpp> Fms_Update()
<- <FMC2_FE2.cpp> UpdateMapMoisture() <- UpdateMoistures() <- RunFmsThread() <- StartFmsThread() <- RunFmsThreads_Stu
<- <FMC_FE2.cpp> CalcMapFuelMoistures() <- CondMngr()
<- <FMC_CFMC.cpp> Run()
<- <Far_Cond.cpp> Run_CondDLL()
<- <Farsite5.cpp> FarsiteSimulationLoop()


UpdateMapMoisture_RAWS() - double humid = 1.0; -> SiteSpecific(..., &humid);
Stephenson 1988



